Program                     ::=
        SourceElement $
;

SourceElement               ::=
        Statement+
;

Statement               ::=
        CompoundStatement
    |   CheckAmongStatement
    |   ConditionalStatement
    |   DeclarationStatement
    |   EmptyStatement
    |   ExpressionStatement
    |   IterativeStatement
    |   JumpStatement
    |   LabelledStatement
;

CompoundStatement       ::=
        "{" SourceElements "}"
;

LabelledStatement       ::=
    |   "Identifier" ":" Statement
;

Literal                 ::=
        BooleanLiteral
    |   NumericLiteral
    |   StringLiteral
;

BooleanLiteral          ::=
        "true"
    |   "false"
;

Lambda                  ::=
        "@" [ "(" [ ParameterList ] ")" [ ":" TypeSpecifier ] ] CompoundStatement
;

NumericLiteral          ::=
        "NumericLiterals"
;

StringLiteral           ::=
        "StringLiteral"
;

CheckAmongStatement     ::=
        "check" Expression "among" "{" LabelledStatement+ "}"
;

ConditionalStatement    ::=
        "if" "(" Expression [ "among" Expression ] ")" Statement [ "else" Statement ]
;

IterativeStatement      ::=
        "do" Statement "while"  "(" Expression ")" ";"
    |   "while"                 "(" Expression ")" Statement
    |   "for" "(" ForStatementHelper
;

ForStatementHelper      ::=
        DeclarationStatement [ Expression ] ";" [ Expression ] ";" [ Expression ] ")" Statement
    |   Expression ":" Expression ")" Statement
;

EmptyStatement          ::=
        ";"
;

DeclarationStatement    ::=
        ClassDeclaration
    |   EnumDeclaration
    |   VariableDeclaration
    |   FunctionDeclaration
;

VariableDeclaration     ::=
        TypeSpecifier DeclarationList ";"
    |   TypeQualifier VariableDeclaration
;

TypeSpecifier           ::=
        BuiltinTypes
    |   "var"
    |   "Identifier"
    |   "decltype" "(" Expression ")"
;

TypeQualifier           ::=
        "const"
;

BuiltinTypes            ::=
        "int"
    |   "double"
    |   "string"
    |   "boolean"
;

DeclarationList ::=
        Decl [ "," DeclarationList ]
;

Decl                   ::=
        "Identifier" OptionalInitalizer
;

OptionalInitalizer      ::=
        "=" AssignmentExpression
    |   Epsilon
;

EnumDeclaration         ::=
        "enum" "Identifier" "{" EnumeratorList "}" ";"
;

EnumeratorList          ::=
        Enumerator [ "," EnumeratorList ]
;

Enumerator              ::=
        "Identifier" [ "=" NumericLiteral ]
;

ClassDeclaration        ::=
        "class" "Identifier" OptionalBaseClasses "{" ClassBody "}" ";"
;

OptionalBaseClasses    ::=
        "extends" TypeSpecifier TypeSpecifierList
    |   Epsilon
;

TypeSpecifierList       ::=
        "," TypeSpecifier TypeSpecifierList
    |   Epsilon
;

ClassBody               ::=
        [ OptionalAccessSpecifier ] ClassBodyList
;

OptionalAccessSpecifier ::=
        "private"
    |   "protected"
    |   "public"
;

ClassBodyList           ::=
        DeclarationStatement
;

FunctionDeclaration         ::=
        "function" "Identifier" "(" [ ParameterList ] ")" [ ":" TypeSpecifier ] CompoundStatement
;

ParameterList               ::=
        "Identifier" [ "," ParameterList ]
;

ExpressionStatement     ::=
        Expression
;

Expression              ::=
        AssignmentExpression [ "," Expression ]
;

AssignmentExpression    ::=
        ConditionalExpression
    |   PostfixExpression AssignmentOperator AssignmentExpression
;

AssignmentOperator      ::=
        =
    |   *=
    |   /=
    |   %=
    |   +=
    |   -=
    |   <<=
    |   >>=
    |   &=
    |   ^=
    |   |=
;

ConditionalExpression   ::=
        LogicalOrExpression
    |   LogicalOrExpression [ "?" Expression ":" ConditionalExpression ]
;

LogicalOrExpression     ::=
        LogicalAndExpression
    |   LogicalOrExpression "||" LogicalAndExpression
;
    
LogicalAndExpression    ::=
        InclusiveOrExpression
    |   LogicalAndExpression "&&" InclusiveOrExpression
    
InclusiveOrExpression   ::=
        ExclusiveOrExpression
    |   InclusiveOrExpression "|" ExclusiveOrExpression
;
    
ExclusiveOrExpression   ::=
        AndExpression
    |   ExclusiveOrExpression "^" AndExpression
;

AndExpression           ::=
        EqualityExpression
    |   AndExpression "&" EqualityExpression
;

EqualityExpression      ::=
        RelationalExpression
    |   EqualityExpression "==" RelationalExpression
    |   EqualityExpression "!=" RelationalExpression
;

RelationalExpression    ::=
        ShiftExpression
    |   RelationalExpression "<" ShiftExpression
    |   RelationalExpression ">" ShiftExpression
    |   RelationalExpression "<=" ShiftExpression
    |   RelationalExpression ">=" ShiftExpression
;

ShiftExpression         ::=
        AdditiveExpression
    |   ShiftExpression "<<" AdditiveExpression
    |   ShiftExpression ">>" AdditiveExpression
;

AdditiveExpression      ::=
        MultiplicativeExpression
    |   AdditiveExpression "+" MultiplicativeExpression
    |   AdditiveExpression "-" MultiplicativeExpression
;

MultiplicativeExpression ::=
        UnaryExpression
    |   MultiplicativeExpression "*" UnaryExpression
    |   MultiplicativeExpression "/" UnaryExpression
    |   MultiplicativeExpression "%" UnaryExpression
;

UnaryExpression          ::=
        PostfixExpression
    |   "++" UnaryExpression
    |   "--" UnaryExpression
    |   "typeof" UnaryExpression
    |   UnaryOperator UnaryExpression
;

PrimaryExpression       ::=
    |   "Identifier"
    |   ArrayLiteral
    |   Literal
    |   Lambda
    |   "(" Expression ")"
;

PostfixExpression       ::=
        PrimaryExpression [ PostfixExpressionHelper ]
;

PostfixExpressionHelper ::=
    |   "[" Expression "]" PostfixExpressionHelper
    |   "(" [ Expression ] ")" PostfixExpressionHelper
    |   "." "Identifier" PostfixExpressionHelper
    |   "++" PostfixExpressionHelper
    |   "--" PostfixExpressionHelper
    |   Epsilon
;

UnaryOperator           ::=
    |   -
    |   ~
    |   !
;

ArrayLiteral            ::=
    |   "[" OptionalElementList "]"
;

OptionalElementList     ::=
        AssignmentExpression [ "," OptionalElementList ]
;

ObjectLiteral           ::=
        "{" [ PropertyNameAndValueList ] "}"
;

PropertyNameAndValueList ::=
        PropertyAssignment [ "," PropertyNameAndValueList ]
;

PropertyAssignment      ::=
        PropertyName ":" AssignmentExpression
;

PropertyName            ::=
        "Identifier"
    |   StringLiteral
    |   NumericLiteral
;

PropertySetParameterList ::=
        "Identifier"
;

JumpStatement           ::=
        "continue" ";"
    |   "leave" ";"
    |   "return" Expression ";"
;
